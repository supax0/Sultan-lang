# 1 "compiler/lexer/lexer.mll"
 
  exception Eof
  exception Error of string * Lexing.position
  open Parser
  let current_line = ref 1

# 9 "compiler/lexer/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\225\255\226\255\227\255\228\255\229\255\230\255\231\255\
    \232\255\233\255\234\255\235\255\236\255\002\000\003\000\031\000\
    \033\000\245\255\246\255\054\000\248\255\249\255\085\000\001\000\
    \078\000\153\000\254\255\255\255\251\255\002\000\250\255\097\000\
    \244\255\242\255\241\255\238\255\237\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\016\000\015\000\029\000\
    \012\000\255\255\255\255\008\000\255\255\255\255\029\000\029\000\
    \003\000\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\031\000\029\000\
    \255\255\255\255\000\000\000\000\000\000\029\000\000\000\031\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\015\000\023\000\028\000\028\000\017\000\000\000\022\000\
    \012\000\011\000\019\000\021\000\006\000\020\000\004\000\018\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\005\000\003\000\014\000\016\000\013\000\036\000\
    \035\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\010\000\034\000\009\000\033\000\024\000\
    \032\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\008\000\030\000\007\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\000\000\000\000\000\000\000\000\024\000\000\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\023\000\029\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\016\000\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\022\000\000\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \031\000\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\255\255\255\255\255\255\255\255\024\000\255\255\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\023\000\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\022\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\031\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 9 "compiler/lexer/lexer.mll"
                        ( token lexbuf )
# 156 "compiler/lexer/lexer.ml"

  | 1 ->
# 10 "compiler/lexer/lexer.mll"
                        ( incr current_line; EOL )
# 161 "compiler/lexer/lexer.ml"

  | 2 ->
let
# 11 "compiler/lexer/lexer.mll"
                lxm
# 167 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 11 "compiler/lexer/lexer.mll"
                        ( INT(int_of_string lxm) )
# 171 "compiler/lexer/lexer.ml"

  | 3 ->
let
# 12 "compiler/lexer/lexer.mll"
                                                         lxm
# 177 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 12 "compiler/lexer/lexer.mll"
                                                             (
    match lxm with
    | "def"      -> DEF
    | "class"    -> CLASS
    | "import"   -> IMPORT
    | "as"       -> AS
    | "from"     -> FROM
    | "init"     -> INIT
    | "if"       -> IF
    | "else"     -> ELSE
    | "else_if"  -> ELSE_IF
    | "while"    -> WHILE
    | "print"    -> PRINT
    | "main"     -> MAIN   (* Handling main function *)
    | "read"     -> READ
    | "write"    -> WRITE
    | "in"       -> IN
    | "at"       -> AT
    | "for"      -> FOR
    | "return"   -> RETURN
    | "pass"     -> PASS
    | "break"    -> BREAK
    | "continue" -> CONTINUE
    | "and"      -> AND
    | "or"       -> OR
    | "not"      -> NOT
    | "true"     -> TRUE
    | "false"    -> FALSE
    | _          -> ID lxm  (* Recognize anything else as an identifier *)
  )
# 210 "compiler/lexer/lexer.ml"

  | 4 ->
let
# 42 "compiler/lexer/lexer.mll"
                   str
# 216 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 42 "compiler/lexer/lexer.mll"
                        ( STRING (String.sub str 1 (String.length str - 2)) )
# 220 "compiler/lexer/lexer.ml"

  | 5 ->
let
# 43 "compiler/lexer/lexer.mll"
                      str
# 226 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 43 "compiler/lexer/lexer.mll"
                           ( STRING (String.sub str 1 (String.length str - 2)) )
# 230 "compiler/lexer/lexer.ml"

  | 6 ->
# 44 "compiler/lexer/lexer.mll"
                      ( PLUS )
# 235 "compiler/lexer/lexer.ml"

  | 7 ->
# 45 "compiler/lexer/lexer.mll"
                      ( MINUS )
# 240 "compiler/lexer/lexer.ml"

  | 8 ->
# 46 "compiler/lexer/lexer.mll"
                      ( TIMES )
# 245 "compiler/lexer/lexer.ml"

  | 9 ->
# 47 "compiler/lexer/lexer.mll"
                      ( DIV )
# 250 "compiler/lexer/lexer.ml"

  | 10 ->
# 48 "compiler/lexer/lexer.mll"
                      ( MOD )
# 255 "compiler/lexer/lexer.ml"

  | 11 ->
# 49 "compiler/lexer/lexer.mll"
                      ( POW )
# 260 "compiler/lexer/lexer.ml"

  | 12 ->
# 50 "compiler/lexer/lexer.mll"
                      ( EQ )
# 265 "compiler/lexer/lexer.ml"

  | 13 ->
# 51 "compiler/lexer/lexer.mll"
                      ( EQUALS )
# 270 "compiler/lexer/lexer.ml"

  | 14 ->
# 52 "compiler/lexer/lexer.mll"
                      ( NEQ )
# 275 "compiler/lexer/lexer.ml"

  | 15 ->
# 53 "compiler/lexer/lexer.mll"
                      ( LT )
# 280 "compiler/lexer/lexer.ml"

  | 16 ->
# 54 "compiler/lexer/lexer.mll"
                      ( GT )
# 285 "compiler/lexer/lexer.ml"

  | 17 ->
# 55 "compiler/lexer/lexer.mll"
                      ( LEQ )
# 290 "compiler/lexer/lexer.ml"

  | 18 ->
# 56 "compiler/lexer/lexer.mll"
                      ( GEQ )
# 295 "compiler/lexer/lexer.ml"

  | 19 ->
# 57 "compiler/lexer/lexer.mll"
                      ( LPAREN )
# 300 "compiler/lexer/lexer.ml"

  | 20 ->
# 58 "compiler/lexer/lexer.mll"
                      ( RPAREN )
# 305 "compiler/lexer/lexer.ml"

  | 21 ->
# 59 "compiler/lexer/lexer.mll"
                      ( LBRACKET )
# 310 "compiler/lexer/lexer.ml"

  | 22 ->
# 60 "compiler/lexer/lexer.mll"
                      ( RBRACKET )
# 315 "compiler/lexer/lexer.ml"

  | 23 ->
# 61 "compiler/lexer/lexer.mll"
                      ( LBRACE )
# 320 "compiler/lexer/lexer.ml"

  | 24 ->
# 62 "compiler/lexer/lexer.mll"
                      ( RBRACE )
# 325 "compiler/lexer/lexer.ml"

  | 25 ->
# 63 "compiler/lexer/lexer.mll"
                      ( COMMA )
# 330 "compiler/lexer/lexer.ml"

  | 26 ->
# 64 "compiler/lexer/lexer.mll"
                      ( COLON )
# 335 "compiler/lexer/lexer.ml"

  | 27 ->
# 65 "compiler/lexer/lexer.mll"
                      ( DOT )
# 340 "compiler/lexer/lexer.ml"

  | 28 ->
# 66 "compiler/lexer/lexer.mll"
                      ( SEMICOLON )
# 345 "compiler/lexer/lexer.ml"

  | 29 ->
# 67 "compiler/lexer/lexer.mll"
                      ( raise (Error (Printf.sprintf "Unexpected character: '%s'" (Lexing.lexeme lexbuf), Lexing.lexeme_start_p lexbuf)) )
# 350 "compiler/lexer/lexer.ml"

  | 30 ->
# 68 "compiler/lexer/lexer.mll"
                      ( raise Eof )
# 355 "compiler/lexer/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

