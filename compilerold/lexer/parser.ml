type token =
  | INT of (
# 8 "compiler/lexer/parser.mly"
        int
# 6 "compiler/lexer/parser.ml"
)
  | ID of (
# 9 "compiler/lexer/parser.mly"
        string
# 11 "compiler/lexer/parser.ml"
)
  | STRING of (
# 9 "compiler/lexer/parser.mly"
        string
# 16 "compiler/lexer/parser.ml"
)
  | DEF
  | CLASS
  | IMPORT
  | AS
  | FROM
  | INIT
  | IF
  | ELSE
  | ELSE_IF
  | WHILE
  | READ
  | WRITE
  | IN
  | AT
  | FOR
  | RETURN
  | PASS
  | BREAK
  | CONTINUE
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | POW
  | EQ
  | EQUALS
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | EOL
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COMMA
  | COLON
  | DOT
  | SEMICOLON
  | PRINT
  | MAIN

open Parsing
let _ = parse_error;;
# 2 "compiler/lexer/parser.mly"
(* Import the AST module *)
open Ast

(* Import function handlers *)
# 76 "compiler/lexer/parser.ml"
let yytransl_const = [|
  260 (* DEF *);
  261 (* CLASS *);
  262 (* IMPORT *);
  263 (* AS *);
  264 (* FROM *);
  265 (* INIT *);
  266 (* IF *);
  267 (* ELSE *);
  268 (* ELSE_IF *);
  269 (* WHILE *);
  270 (* READ *);
  271 (* WRITE *);
  272 (* IN *);
  273 (* AT *);
  274 (* FOR *);
  275 (* RETURN *);
  276 (* PASS *);
  277 (* BREAK *);
  278 (* CONTINUE *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* PLUS *);
  285 (* MINUS *);
  286 (* TIMES *);
  287 (* DIV *);
  288 (* MOD *);
  289 (* POW *);
  290 (* EQ *);
  291 (* EQUALS *);
  292 (* NEQ *);
  293 (* LT *);
  294 (* GT *);
  295 (* LEQ *);
  296 (* GEQ *);
  297 (* EOL *);
  298 (* LPAREN *);
  299 (* RPAREN *);
  300 (* LBRACKET *);
  301 (* RBRACKET *);
  302 (* LBRACE *);
  303 (* RBRACE *);
  304 (* COMMA *);
  305 (* COLON *);
  306 (* DOT *);
  307 (* SEMICOLON *);
  308 (* PRINT *);
  309 (* MAIN *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
  259 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\006\000\006\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\005\000\005\000\007\000\007\000\000\000"

let yylen = "\002\000\
\004\000\001\000\002\000\000\000\009\000\006\000\006\000\005\000\
\006\000\006\000\008\000\003\000\003\000\003\000\003\000\003\000\
\005\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\001\000\001\000\003\000\004\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\003\000\001\000\001\000\000\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\055\000\000\000\004\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\026\000\000\000\000\000\000\000\000\000\003\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\018\000\019\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\001\000\046\000\027\000\000\000\000\000\000\000\013\000\
\014\000\015\000\000\000\004\000\000\000\000\000\016\000\000\000\
\012\000\045\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\040\000\041\000\
\042\000\043\000\044\000\028\000\000\000\000\000\051\000\004\000\
\004\000\000\000\004\000\004\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\017\000\
\053\000\000\000\006\000\007\000\009\000\010\000\004\000\004\000\
\000\000\000\000\011\000\005\000"

let yydgoto = "\002\000\
\004\000\032\000\033\000\057\000\110\000\005\000\111\000"

let yysindex = "\002\000\
\207\254\000\000\215\254\000\000\141\001\000\000\000\000\000\000\
\224\254\004\255\009\255\011\255\014\255\016\255\192\255\235\254\
\192\255\192\255\234\254\192\255\034\255\192\255\243\254\244\254\
\247\254\000\000\000\000\192\255\192\255\192\255\002\255\000\000\
\061\255\113\255\192\255\007\255\003\255\253\254\252\254\001\255\
\025\255\000\000\007\002\031\255\029\002\051\002\000\000\215\255\
\032\255\193\001\000\000\000\000\000\000\245\002\175\002\095\002\
\008\255\192\255\192\255\192\255\192\255\192\255\192\255\192\255\
\192\255\192\255\192\255\192\255\192\255\192\255\192\255\192\255\
\000\000\000\000\000\000\000\000\191\002\077\255\036\255\000\000\
\000\000\000\000\037\255\000\000\038\255\049\255\000\000\192\255\
\000\000\000\000\192\255\000\000\207\002\035\255\035\255\223\002\
\223\002\239\002\239\002\239\002\239\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\255\059\255\000\000\000\000\
\000\000\162\255\000\000\000\000\073\002\000\000\029\255\077\255\
\054\255\103\000\152\000\000\000\201\000\250\000\058\255\000\000\
\000\000\062\255\000\000\000\000\000\000\000\000\000\000\000\000\
\043\001\092\001\000\000\000\000"

let yyrindex = "\000\000\
\054\000\000\000\000\000\000\000\105\000\000\000\001\000\000\000\
\166\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\002\000\000\066\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\073\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\209\001\236\001\179\255\
\042\000\248\254\117\002\141\002\148\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\253\255\047\000\000\000\250\255\019\000"

let yytablesize = 1053
let yytable = "\034\000\
\023\000\035\000\001\000\003\000\006\000\037\000\042\000\008\000\
\009\000\036\000\038\000\043\000\039\000\045\000\046\000\040\000\
\048\000\041\000\050\000\032\000\032\000\032\000\032\000\032\000\
\054\000\055\000\056\000\044\000\047\000\026\000\027\000\075\000\
\077\000\028\000\032\000\049\000\032\000\051\000\052\000\032\000\
\032\000\053\000\032\000\058\000\078\000\079\000\080\000\088\000\
\029\000\076\000\030\000\081\000\092\000\004\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\067\000\068\000\069\000\
\070\000\071\000\072\000\082\000\084\000\114\000\109\000\128\000\
\120\000\112\000\113\000\115\000\117\000\059\000\060\000\056\000\
\061\000\062\000\063\000\064\000\065\000\066\000\116\000\067\000\
\068\000\069\000\070\000\071\000\072\000\121\000\130\000\135\000\
\002\000\122\000\123\000\136\000\125\000\126\000\050\000\073\000\
\007\000\008\000\009\000\052\000\010\000\011\000\012\000\013\000\
\014\000\054\000\015\000\016\000\017\000\018\000\019\000\020\000\
\137\000\138\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\118\000\129\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\030\000\000\000\000\000\074\000\
\000\000\007\000\008\000\009\000\031\000\010\000\011\000\012\000\
\013\000\014\000\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\000\000\000\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\000\000\028\000\000\000\000\000\042\000\
\008\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\030\000\030\000\030\000\
\124\000\000\000\000\000\000\000\000\000\031\000\026\000\027\000\
\000\000\000\000\028\000\000\000\000\000\030\000\000\000\030\000\
\000\000\000\000\030\000\030\000\000\000\030\000\000\000\000\000\
\000\000\029\000\000\000\030\000\000\000\000\000\000\000\059\000\
\060\000\000\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\000\000\
\023\000\023\000\023\000\000\000\023\000\023\000\023\000\023\000\
\023\000\087\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\048\000\048\000\023\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\023\000\000\000\023\000\000\000\000\000\023\000\
\000\000\000\000\000\000\048\000\023\000\004\000\004\000\004\000\
\000\000\004\000\004\000\004\000\004\000\004\000\000\000\004\000\
\004\000\004\000\004\000\004\000\004\000\031\000\031\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
\004\000\000\000\000\000\000\000\031\000\000\000\031\000\000\000\
\000\000\031\000\031\000\000\000\031\000\000\000\000\000\004\000\
\000\000\004\000\000\000\000\000\000\000\000\000\007\000\008\000\
\009\000\004\000\010\000\011\000\012\000\013\000\014\000\000\000\
\015\000\016\000\017\000\018\000\019\000\020\000\000\000\000\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\030\000\000\000\000\000\131\000\000\000\007\000\
\008\000\009\000\031\000\010\000\011\000\012\000\013\000\014\000\
\000\000\015\000\016\000\017\000\018\000\019\000\020\000\000\000\
\000\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\030\000\000\000\000\000\132\000\000\000\
\007\000\008\000\009\000\031\000\010\000\011\000\012\000\013\000\
\014\000\000\000\015\000\016\000\017\000\018\000\019\000\020\000\
\000\000\000\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\030\000\000\000\000\000\133\000\
\000\000\007\000\008\000\009\000\031\000\010\000\011\000\012\000\
\013\000\014\000\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\000\000\000\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\030\000\000\000\000\000\
\134\000\000\000\007\000\008\000\009\000\031\000\010\000\011\000\
\012\000\013\000\014\000\000\000\015\000\016\000\017\000\018\000\
\019\000\020\000\000\000\000\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\030\000\000\000\
\000\000\139\000\000\000\007\000\008\000\009\000\031\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\000\000\000\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\000\000\000\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\030\000\
\000\000\000\000\140\000\000\000\007\000\008\000\009\000\031\000\
\010\000\011\000\012\000\013\000\014\000\000\000\015\000\016\000\
\017\000\018\000\019\000\020\000\000\000\000\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\030\000\000\000\000\000\000\000\000\000\000\000\029\000\029\000\
\031\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\000\000\000\000\
\029\000\000\000\029\000\000\000\000\000\029\000\029\000\000\000\
\029\000\059\000\060\000\000\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\036\000\036\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\000\000\089\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\036\000\000\000\000\000\
\036\000\036\000\000\000\036\000\037\000\037\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\037\000\000\000\000\000\037\000\037\000\000\000\037\000\059\000\
\060\000\000\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\060\000\083\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\060\000\085\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\060\000\086\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\060\000\127\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\091\000\000\000\
\033\000\033\000\033\000\033\000\033\000\000\000\038\000\000\000\
\038\000\000\000\000\000\038\000\038\000\000\000\038\000\033\000\
\000\000\033\000\000\000\000\000\033\000\033\000\000\000\033\000\
\034\000\034\000\034\000\034\000\034\000\000\000\000\000\035\000\
\035\000\035\000\035\000\035\000\000\000\000\000\000\000\034\000\
\000\000\034\000\000\000\000\000\034\000\034\000\035\000\034\000\
\035\000\000\000\000\000\035\000\035\000\000\000\035\000\059\000\
\060\000\000\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\059\000\
\060\000\090\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\059\000\
\060\000\108\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\059\000\
\060\000\119\000\000\000\000\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\059\000\
\060\000\000\000\000\000\000\000\000\000\059\000\060\000\066\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\067\000\
\068\000\069\000\070\000\071\000\072\000"

let yycheck = "\006\000\
\000\000\034\001\001\000\053\001\046\001\002\001\000\001\001\001\
\002\001\042\001\002\001\015\000\002\001\017\000\018\000\002\001\
\020\000\002\001\022\000\028\001\029\001\030\001\031\001\032\001\
\028\000\029\000\030\000\049\001\051\001\023\001\024\001\035\000\
\036\000\027\001\043\001\002\001\045\001\051\001\051\001\048\001\
\049\001\051\001\051\001\042\001\042\001\049\001\051\001\016\001\
\042\001\043\001\044\001\051\001\045\001\000\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\035\001\036\001\037\001\
\038\001\039\001\040\001\051\001\046\001\084\000\002\001\051\001\
\048\001\046\001\046\001\046\001\088\000\025\001\026\001\091\000\
\028\001\029\001\030\001\031\001\032\001\033\001\046\001\035\001\
\036\001\037\001\038\001\039\001\040\001\043\001\049\001\046\001\
\000\000\112\000\113\000\046\001\115\000\116\000\045\001\051\001\
\000\001\001\001\002\001\043\001\004\001\005\001\006\001\007\001\
\008\001\043\001\010\001\011\001\012\001\013\001\014\001\015\001\
\135\000\136\000\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\091\000\120\000\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\255\255\255\255\047\001\
\255\255\000\001\001\001\002\001\052\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\255\255\255\255\000\001\
\001\001\002\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\044\001\028\001\029\001\
\047\001\255\255\255\255\255\255\255\255\052\001\023\001\024\001\
\255\255\255\255\027\001\255\255\255\255\043\001\255\255\045\001\
\255\255\255\255\048\001\049\001\255\255\051\001\255\255\255\255\
\255\255\042\001\255\255\044\001\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\051\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\042\001\255\255\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\000\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\028\001\029\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\255\255\255\255\255\255\043\001\255\255\045\001\255\255\
\255\255\048\001\049\001\255\255\051\001\255\255\255\255\042\001\
\255\255\044\001\255\255\255\255\255\255\255\255\000\001\001\001\
\002\001\052\001\004\001\005\001\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\044\001\255\255\255\255\047\001\255\255\000\001\
\001\001\002\001\052\001\004\001\005\001\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\044\001\255\255\255\255\047\001\255\255\
\000\001\001\001\002\001\052\001\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\255\255\255\255\047\001\
\255\255\000\001\001\001\002\001\052\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\044\001\255\255\255\255\
\047\001\255\255\000\001\001\001\002\001\052\001\004\001\005\001\
\006\001\007\001\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\042\001\255\255\044\001\255\255\
\255\255\047\001\255\255\000\001\001\001\002\001\052\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\044\001\
\255\255\255\255\047\001\255\255\000\001\001\001\002\001\052\001\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\052\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\255\255\045\001\255\255\255\255\048\001\049\001\255\255\
\051\001\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\049\001\255\255\051\001\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\045\001\255\255\255\255\048\001\049\001\255\255\051\001\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\049\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\049\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\049\001\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\049\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\048\001\255\255\
\028\001\029\001\030\001\031\001\032\001\255\255\043\001\255\255\
\045\001\255\255\255\255\048\001\049\001\255\255\051\001\043\001\
\255\255\045\001\255\255\255\255\048\001\049\001\255\255\051\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\043\001\
\255\255\045\001\255\255\255\255\048\001\049\001\043\001\051\001\
\045\001\255\255\255\255\048\001\049\001\255\255\051\001\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\025\001\
\026\001\043\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\025\001\
\026\001\043\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\025\001\
\026\001\043\001\255\255\255\255\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\025\001\
\026\001\255\255\255\255\255\255\255\255\025\001\026\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\035\001\
\036\001\037\001\038\001\039\001\040\001"

let yynames_const = "\
  DEF\000\
  CLASS\000\
  IMPORT\000\
  AS\000\
  FROM\000\
  INIT\000\
  IF\000\
  ELSE\000\
  ELSE_IF\000\
  WHILE\000\
  READ\000\
  WRITE\000\
  IN\000\
  AT\000\
  FOR\000\
  RETURN\000\
  PASS\000\
  BREAK\000\
  CONTINUE\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  POW\000\
  EQ\000\
  EQUALS\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EOL\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  COLON\000\
  DOT\000\
  SEMICOLON\000\
  PRINT\000\
  MAIN\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 36 "compiler/lexer/parser.mly"
                                   ( FunctionDef.handle_main_block (_3) )
# 555 "compiler/lexer/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 37 "compiler/lexer/parser.mly"
                                   ( FunctionDef.handle_program (_1) )
# 562 "compiler/lexer/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : stmt) in
    Obj.repr(
# 40 "compiler/lexer/parser.mly"
                                   ( FunctionDef.handle_stmt_list (_1, _2) )
# 570 "compiler/lexer/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "compiler/lexer/parser.mly"
                                   ( FunctionDef.handle_empty_stmt_list () )
# 576 "compiler/lexer/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 45 "compiler/lexer/parser.mly"
      ( FunctionDef.handle_functiondef (_2, _4, _8) )
# 585 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "compiler/lexer/parser.mly"
      ( ClassDef.handle_classdef (_2, _5) )
# 593 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "compiler/lexer/parser.mly"
      ( If.handle_if (_2, _5) )
# 601 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "compiler/lexer/parser.mly"
      ( Else.handle_else (_4) )
# 608 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 53 "compiler/lexer/parser.mly"
      ( ElseIf.handle_elseif (_2, _5) )
# 616 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "compiler/lexer/parser.mly"
      ( While.handle_while (_2, _5) )
# 624 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 57 "compiler/lexer/parser.mly"
      ( For.handle_for (_2, _4, _7) )
# 633 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 59 "compiler/lexer/parser.mly"
      ( Return.handle_return (_2) )
# 640 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 61 "compiler/lexer/parser.mly"
      ( Import.handle_import (_2) )
# 647 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 63 "compiler/lexer/parser.mly"
      ( As.handle_as (_2) )
# 654 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 65 "compiler/lexer/parser.mly"
      ( From.handle_from (_2) )
# 661 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 67 "compiler/lexer/parser.mly"
      ( Write.handle_write (_2) )
# 668 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    Obj.repr(
# 69 "compiler/lexer/parser.mly"
      ( FunctionCall.handle_functioncall ("print", Some _3) )
# 675 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "compiler/lexer/parser.mly"
      ( Pass.handle_pass () )
# 681 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "compiler/lexer/parser.mly"
      ( Break.handle_break () )
# 687 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "compiler/lexer/parser.mly"
      ( Continue.handle_continue () )
# 693 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "compiler/lexer/parser.mly"
      ( Read.handle_read () )
# 699 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 79 "compiler/lexer/parser.mly"
      ( FunctionDef.handle_expr_stmt (_1) )
# 706 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "compiler/lexer/parser.mly"
      ( FunctionDef.handle_error_stmt () )
# 712 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 84 "compiler/lexer/parser.mly"
                                  ( Int.handle_int (_1) )
# 719 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "compiler/lexer/parser.mly"
                                  ( Bool.handle_bool (true) )
# 725 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "compiler/lexer/parser.mly"
                                  ( Bool.handle_bool (false) )
# 731 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 87 "compiler/lexer/parser.mly"
                                  ( FunctionCall.handle_functioncall (_1, None) )
# 738 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 88 "compiler/lexer/parser.mly"
                                  ( FunctionCall.handle_functioncall (_1, Some _3) )
# 746 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "compiler/lexer/parser.mly"
                                  ( Var.handle_var (_1) )
# 753 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 90 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("+", _1, _3) )
# 761 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 91 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("-", _1, _3) )
# 769 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 92 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("*", _1, _3) )
# 777 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 93 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("/", _1, _3) )
# 785 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 94 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("%", _1, _3) )
# 793 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 95 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("**", _1, _3) )
# 801 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 96 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("and", _1, _3) )
# 809 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 97 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("or", _1, _3) )
# 817 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 98 "compiler/lexer/parser.mly"
                                  ( UnOp.handle_unop ("not", _2) )
# 824 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 99 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("==", _1, _3) )
# 832 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 100 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("!=", _1, _3) )
# 840 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 101 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("<", _1, _3) )
# 848 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 102 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop (">", _1, _3) )
# 856 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 103 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop ("<=", _1, _3) )
# 864 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 104 "compiler/lexer/parser.mly"
                                  ( BinOp.handle_binop (">=", _1, _3) )
# 872 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 105 "compiler/lexer/parser.mly"
                                  ( FunctionDef.handle_parenthesized_expr (_2) )
# 879 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 106 "compiler/lexer/parser.mly"
                                  ( Assign.handle_assign (_1, _3) )
# 887 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr list) in
    Obj.repr(
# 107 "compiler/lexer/parser.mly"
                                  ( ArrayLiteral.handle_arrayliteral (_2) )
# 894 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "compiler/lexer/parser.mly"
      ( FunctionDef.handle_error_expr () )
# 900 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr list) in
    Obj.repr(
# 112 "compiler/lexer/parser.mly"
                                  ( FunctionDef.handle_expr_list (_1, _3) )
# 908 "compiler/lexer/parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 113 "compiler/lexer/parser.mly"
                                  ( FunctionDef.handle_single_expr (_1) )
# 915 "compiler/lexer/parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 116 "compiler/lexer/parser.mly"
                                  ( FunctionDef.handle_param_list (_1) )
# 922 "compiler/lexer/parser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "compiler/lexer/parser.mly"
                                  ( FunctionDef.handle_empty_param_list () )
# 928 "compiler/lexer/parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 120 "compiler/lexer/parser.mly"
                                  ( FunctionDef.handle_param_list (_1 :: _3) )
# 936 "compiler/lexer/parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "compiler/lexer/parser.mly"
                                  ( FunctionDef.handle_param (_1) )
# 943 "compiler/lexer/parser.ml"
               : 'param_list))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
