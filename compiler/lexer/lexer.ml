# 2 "compiler/lexer/lexer.mll"
 
  exception Eof
  exception Error of string * Lexing.position
  open Parser
  let current_line = ref 1

  (* Include the Almostashar Debugger Module *)
  open Almostashar

# 12 "compiler/lexer/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\221\255\222\255\002\000\031\000\033\000\230\255\231\255\
    \054\000\234\255\085\000\002\000\238\255\239\255\240\255\241\255\
    \242\255\243\255\244\255\245\255\246\255\247\255\065\000\065\000\
    \001\000\251\255\080\000\194\000\155\000\254\255\255\255\104\000\
    \237\255\249\255\228\255\236\255\105\000\235\255\101\000\229\255\
    \227\255\224\255\223\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\030\000\029\000\033\000\255\255\255\255\
    \023\000\255\255\033\000\033\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\007\000\022\000\
    \005\000\255\255\003\000\003\000\002\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\038\000\036\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \024\000\000\000\255\255\255\255\255\255\000\000\000\000\031\000\
    \000\000\000\000\000\000\000\000\036\000\000\000\038\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\030\000\029\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\005\000\011\000\024\000\035\000\006\000\000\000\010\000\
    \015\000\014\000\008\000\009\000\019\000\023\000\017\000\007\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\018\000\016\000\004\000\022\000\003\000\042\000\
    \025\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\013\000\041\000\012\000\040\000\026\000\
    \039\000\026\000\026\000\026\000\026\000\026\000\027\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\021\000\037\000\020\000\034\000\033\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\032\000\035\000\037\000\000\000\000\000\000\000\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\000\000\000\000\000\000\000\000\026\000\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
    \000\000\026\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\011\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\000\000\005\000\000\000\
    \008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\000\000\022\000\023\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\031\000\036\000\038\000\255\255\255\255\255\255\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\255\255\255\255\255\255\255\255\026\000\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\027\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\255\255\255\255\255\255\255\255\
    \000\000\024\000\011\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\255\255\255\255\255\255\
    \255\255\027\000\255\255\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\038\000\255\255\255\255\
    \031\000\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 13 "compiler/lexer/lexer.mll"
                        ( token lexbuf )
# 172 "compiler/lexer/lexer.ml"

  | 1 ->
# 14 "compiler/lexer/lexer.mll"
                        ( incr current_line; EOL )
# 177 "compiler/lexer/lexer.ml"

  | 2 ->
let
# 15 "compiler/lexer/lexer.mll"
                lxm
# 183 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 15 "compiler/lexer/lexer.mll"
                        ( INT(int_of_string lxm) )
# 187 "compiler/lexer/lexer.ml"

  | 3 ->
let
# 16 "compiler/lexer/lexer.mll"
                                                         lxm
# 193 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 16 "compiler/lexer/lexer.mll"
                                                             (
    match lxm with
    | "def"      -> DEF
    | "class"    -> CLASS
    | "import"   -> IMPORT
    | "as"       -> AS
    | "from"     -> FROM
    | "init"     -> INIT
    | "if"       -> IF
    | "else"     -> ELSE
    | "else_if"  -> ELSE_IF
    | "while"    -> WHILE
    | "print"    -> PRINT
    | "main"     -> MAIN   (* Handling main function *)
    | "read"     -> READ
    | "write"    -> WRITE
    | "in"       -> IN
    | "at"       -> AT
    | "for"      -> FOR
    | "return"   -> RETURN
    | "pass"     -> PASS
    | "break"    -> BREAK
    | "continue" -> CONTINUE
    | "and"      -> AND
    | "or"       -> OR
    | "not"      -> NOT
    | "true"     -> TRUE
    | "false"    -> FALSE
    | "public"   -> PUBLIC
    | "struct"   -> STRUCT
    | _          -> ID lxm  (* Recognize anything else as an identifier *)
  )
# 228 "compiler/lexer/lexer.ml"

  | 4 ->
# 48 "compiler/lexer/lexer.mll"
                       ( ANNOT )
# 233 "compiler/lexer/lexer.ml"

  | 5 ->
# 49 "compiler/lexer/lexer.mll"
                       ( token lexbuf )
# 238 "compiler/lexer/lexer.ml"

  | 6 ->
# 50 "compiler/lexer/lexer.mll"
                       ( ARROW )
# 243 "compiler/lexer/lexer.ml"

  | 7 ->
# 51 "compiler/lexer/lexer.mll"
                       ( EQ )
# 248 "compiler/lexer/lexer.ml"

  | 8 ->
# 52 "compiler/lexer/lexer.mll"
                       ( LBRACE )
# 253 "compiler/lexer/lexer.ml"

  | 9 ->
# 53 "compiler/lexer/lexer.mll"
                       ( RBRACE )
# 258 "compiler/lexer/lexer.ml"

  | 10 ->
# 54 "compiler/lexer/lexer.mll"
                       ( COMMA )
# 263 "compiler/lexer/lexer.ml"

  | 11 ->
# 55 "compiler/lexer/lexer.mll"
                       ( COLON )
# 268 "compiler/lexer/lexer.ml"

  | 12 ->
# 56 "compiler/lexer/lexer.mll"
                       ( DOT )
# 273 "compiler/lexer/lexer.ml"

  | 13 ->
# 57 "compiler/lexer/lexer.mll"
                       ( SEMICOLON )
# 278 "compiler/lexer/lexer.ml"

  | 14 ->
# 58 "compiler/lexer/lexer.mll"
                       ( LPAREN )
# 283 "compiler/lexer/lexer.ml"

  | 15 ->
# 59 "compiler/lexer/lexer.mll"
                       ( RPAREN )
# 288 "compiler/lexer/lexer.ml"

  | 16 ->
# 60 "compiler/lexer/lexer.mll"
                       ( LBRACKET )
# 293 "compiler/lexer/lexer.ml"

  | 17 ->
# 61 "compiler/lexer/lexer.mll"
                       ( RBRACKET )
# 298 "compiler/lexer/lexer.ml"

  | 18 ->
let
# 62 "compiler/lexer/lexer.mll"
                         fstr
# 304 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 62 "compiler/lexer/lexer.mll"
                              ( FSTRING (String.sub fstr 2 (String.length fstr - 3)) )
# 308 "compiler/lexer/lexer.ml"

  | 19 ->
let
# 63 "compiler/lexer/lexer.mll"
                   str
# 314 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 63 "compiler/lexer/lexer.mll"
                       ( STRING (String.sub str 1 (String.length str - 2)) )
# 318 "compiler/lexer/lexer.ml"

  | 20 ->
let
# 64 "compiler/lexer/lexer.mll"
                      str
# 324 "compiler/lexer/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 64 "compiler/lexer/lexer.mll"
                          ( STRING (String.sub str 1 (String.length str - 2)) )
# 328 "compiler/lexer/lexer.ml"

  | 21 ->
# 65 "compiler/lexer/lexer.mll"
                       ( PLUS )
# 333 "compiler/lexer/lexer.ml"

  | 22 ->
# 66 "compiler/lexer/lexer.mll"
                       ( MINUS )
# 338 "compiler/lexer/lexer.ml"

  | 23 ->
# 67 "compiler/lexer/lexer.mll"
                       ( TIMES )
# 343 "compiler/lexer/lexer.ml"

  | 24 ->
# 68 "compiler/lexer/lexer.mll"
                       ( DIV )
# 348 "compiler/lexer/lexer.ml"

  | 25 ->
# 69 "compiler/lexer/lexer.mll"
                       ( MOD )
# 353 "compiler/lexer/lexer.ml"

  | 26 ->
# 70 "compiler/lexer/lexer.mll"
                       ( POW )
# 358 "compiler/lexer/lexer.ml"

  | 27 ->
# 71 "compiler/lexer/lexer.mll"
                       ( EQUALS )
# 363 "compiler/lexer/lexer.ml"

  | 28 ->
# 72 "compiler/lexer/lexer.mll"
                       ( NEQ )
# 368 "compiler/lexer/lexer.ml"

  | 29 ->
# 73 "compiler/lexer/lexer.mll"
                       ( LT )
# 373 "compiler/lexer/lexer.ml"

  | 30 ->
# 74 "compiler/lexer/lexer.mll"
                       ( GT )
# 378 "compiler/lexer/lexer.ml"

  | 31 ->
# 75 "compiler/lexer/lexer.mll"
                       ( LEQ )
# 383 "compiler/lexer/lexer.ml"

  | 32 ->
# 76 "compiler/lexer/lexer.mll"
                       ( GEQ )
# 388 "compiler/lexer/lexer.ml"

  | 33 ->
# 77 "compiler/lexer/lexer.mll"
                       ( raise (Error (Printf.sprintf "Unexpected character: '%s'" (Lexing.lexeme lexbuf), Lexing.lexeme_start_p lexbuf)) )
# 393 "compiler/lexer/lexer.ml"

  | 34 ->
# 78 "compiler/lexer/lexer.mll"
                       ( raise Eof )
# 398 "compiler/lexer/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

