type token =
  | INT of (
# 9 "compiler/lexer/parser.mly"
        int
# 6 "compiler/lexer/parser.ml"
)
  | ID of (
# 10 "compiler/lexer/parser.mly"
        string
# 11 "compiler/lexer/parser.ml"
)
  | STRING of (
# 10 "compiler/lexer/parser.mly"
        string
# 16 "compiler/lexer/parser.ml"
)
  | FSTRING of (
# 10 "compiler/lexer/parser.mly"
        string
# 21 "compiler/lexer/parser.ml"
)
  | DEF
  | CLASS
  | IMPORT
  | AS
  | FROM
  | INIT
  | IF
  | ELSE
  | ELSE_IF
  | WHILE
  | READ
  | WRITE
  | IN
  | AT
  | FOR
  | RETURN
  | PASS
  | BREAK
  | CONTINUE
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | POW
  | EQ
  | EQUALS
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | EOL
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COMMA
  | COLON
  | DOT
  | SEMICOLON
  | PRINT
  | MAIN
  | PUBLIC
  | STRUCT
  | ANNOT
  | ARROW

open Parsing
let _ = parse_error;;
# 2 "compiler/lexer/parser.mly"
(* Import the AST module *)
open Ast

(* Import the Almostashar debugger module *)
open Almostashar
# 86 "compiler/lexer/parser.ml"
let yytransl_const = [|
  261 (* DEF *);
  262 (* CLASS *);
  263 (* IMPORT *);
  264 (* AS *);
  265 (* FROM *);
  266 (* INIT *);
  267 (* IF *);
  268 (* ELSE *);
  269 (* ELSE_IF *);
  270 (* WHILE *);
  271 (* READ *);
  272 (* WRITE *);
  273 (* IN *);
  274 (* AT *);
  275 (* FOR *);
  276 (* RETURN *);
  277 (* PASS *);
  278 (* BREAK *);
  279 (* CONTINUE *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* PLUS *);
  286 (* MINUS *);
  287 (* TIMES *);
  288 (* DIV *);
  289 (* MOD *);
  290 (* POW *);
  291 (* EQ *);
  292 (* EQUALS *);
  293 (* NEQ *);
  294 (* LT *);
  295 (* GT *);
  296 (* LEQ *);
  297 (* GEQ *);
  298 (* EOL *);
  299 (* LPAREN *);
  300 (* RPAREN *);
  301 (* LBRACKET *);
  302 (* RBRACKET *);
  303 (* LBRACE *);
  304 (* RBRACE *);
  305 (* COMMA *);
  306 (* COLON *);
  307 (* DOT *);
  308 (* SEMICOLON *);
  309 (* PRINT *);
  310 (* MAIN *);
  311 (* PUBLIC *);
  312 (* STRUCT *);
  313 (* ANNOT *);
  314 (* ARROW *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
  259 (* STRING *);
  260 (* FSTRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\006\000\006\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\004\000\005\000\
\005\000\008\000\008\000\007\000\007\000\000\000"

let yylen = "\002\000\
\004\000\001\000\002\000\000\000\009\000\006\000\006\000\005\000\
\006\000\006\000\008\000\003\000\003\000\003\000\003\000\003\000\
\005\000\002\000\002\000\002\000\002\000\007\000\003\000\002\000\
\001\000\001\000\001\000\001\000\003\000\004\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\004\000\003\000\001\000\003\000\001\000\001\000\
\000\000\005\000\003\000\005\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\062\000\000\000\004\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\018\000\
\019\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\001\000\048\000\029\000\000\000\052\000\000\000\000\000\000\000\
\013\000\014\000\015\000\000\000\004\000\000\000\000\000\016\000\
\000\000\012\000\047\000\000\000\049\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\042\000\043\000\044\000\045\000\046\000\030\000\051\000\
\000\000\000\000\056\000\004\000\004\000\000\000\004\000\004\000\
\000\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\006\000\007\000\009\000\010\000\004\000\000\000\000\000\000\000\
\004\000\000\000\000\000\022\000\058\000\000\000\011\000\000\000\
\005\000\000\000\060\000"

let yydgoto = "\002\000\
\004\000\035\000\036\000\062\000\122\000\005\000\151\000\123\000"

let yysindex = "\008\000\
\204\254\000\000\221\254\000\000\011\002\000\000\000\000\000\000\
\243\254\228\254\021\255\027\255\030\255\040\255\042\255\053\255\
\251\254\053\255\053\255\253\254\053\255\048\255\053\255\255\254\
\000\255\004\255\000\000\000\000\053\255\053\255\053\255\017\255\
\019\255\077\255\000\000\073\255\151\255\053\255\003\255\078\255\
\053\255\039\255\033\255\032\255\034\255\036\255\000\000\140\002\
\038\255\162\002\184\002\000\000\097\255\072\255\215\255\000\000\
\000\000\000\000\099\003\045\003\228\002\044\255\053\255\089\255\
\011\002\053\255\053\255\053\255\053\255\053\255\053\255\053\255\
\053\255\053\255\053\255\053\255\053\255\053\255\053\255\000\000\
\000\000\000\000\000\000\049\255\000\000\046\255\095\255\054\255\
\000\000\000\000\000\000\061\255\000\000\068\255\069\255\000\000\
\053\255\000\000\000\000\053\255\000\000\061\003\082\255\000\000\
\060\000\060\000\077\003\077\003\093\003\093\003\093\003\093\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\255\088\255\000\000\000\000\000\000\117\000\000\000\000\000\
\206\002\000\000\087\255\093\255\140\255\091\255\175\000\233\000\
\000\000\035\001\093\001\098\255\000\000\142\255\099\255\107\255\
\000\000\000\000\000\000\000\000\000\000\103\255\129\255\095\255\
\000\000\151\001\053\255\000\000\000\000\209\001\000\000\070\002\
\000\000\142\255\000\000"

let yyrindex = "\000\000\
\059\000\000\000\000\000\000\000\146\000\000\000\001\000\000\000\
\183\255\043\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\000\000\218\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\002\113\002\247\254\139\255\013\002\241\002\250\002\018\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\136\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\133\255\000\000"

let yygindex = "\000\000\
\000\000\119\000\251\255\232\255\000\000\250\255\020\000\034\000"

let yytablesize = 1164
let yytable = "\037\000\
\025\000\003\000\047\000\008\000\009\000\055\000\010\000\055\000\
\001\000\055\000\048\000\006\000\050\000\051\000\084\000\053\000\
\086\000\055\000\041\000\032\000\032\000\038\000\042\000\059\000\
\060\000\061\000\027\000\028\000\043\000\039\000\029\000\044\000\
\082\000\061\000\032\000\061\000\032\000\040\000\032\000\032\000\
\032\000\045\000\032\000\046\000\049\000\030\000\083\000\031\000\
\052\000\054\000\056\000\057\000\047\000\008\000\009\000\058\000\
\010\000\102\000\004\000\063\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\064\000\130\000\027\000\028\000\065\000\085\000\
\029\000\087\000\088\000\089\000\093\000\090\000\126\000\091\000\
\097\000\101\000\103\000\129\000\119\000\120\000\061\000\030\000\
\121\000\031\000\066\000\067\000\124\000\068\000\069\000\070\000\
\071\000\072\000\073\000\125\000\074\000\075\000\076\000\077\000\
\078\000\079\000\127\000\128\000\132\000\135\000\136\000\133\000\
\138\000\139\000\066\000\067\000\080\000\068\000\069\000\070\000\
\071\000\072\000\073\000\134\000\074\000\075\000\076\000\077\000\
\078\000\079\000\141\000\142\000\144\000\143\000\154\000\150\000\
\149\000\002\000\158\000\152\000\096\000\160\000\007\000\008\000\
\009\000\153\000\010\000\011\000\012\000\013\000\014\000\015\000\
\155\000\016\000\017\000\018\000\019\000\020\000\021\000\033\000\
\033\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\156\000\057\000\029\000\059\000\061\000\163\000\033\000\104\000\
\033\000\157\000\033\000\033\000\033\000\000\000\033\000\000\000\
\000\000\030\000\000\000\031\000\000\000\000\000\081\000\000\000\
\000\000\000\000\000\000\032\000\000\000\033\000\000\000\034\000\
\031\000\031\000\000\000\031\000\031\000\031\000\031\000\031\000\
\031\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000\000\000\031\000\000\000\031\000\000\000\031\000\031\000\
\031\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\066\000\067\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\025\000\025\000\025\000\000\000\025\000\025\000\025\000\025\000\
\025\000\025\000\098\000\025\000\025\000\025\000\025\000\025\000\
\025\000\000\000\000\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\053\000\053\000\025\000\053\000\053\000\053\000\
\053\000\053\000\053\000\000\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\025\000\000\000\025\000\000\000\000\000\
\025\000\000\000\000\000\000\000\053\000\025\000\000\000\025\000\
\000\000\025\000\004\000\004\000\004\000\000\000\004\000\004\000\
\004\000\004\000\004\000\004\000\000\000\004\000\004\000\004\000\
\004\000\004\000\004\000\000\000\000\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\000\000\000\000\004\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\074\000\
\075\000\076\000\077\000\078\000\079\000\004\000\000\000\004\000\
\040\000\000\000\040\000\000\000\040\000\040\000\040\000\004\000\
\040\000\004\000\000\000\004\000\007\000\008\000\009\000\000\000\
\010\000\011\000\012\000\013\000\014\000\015\000\000\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\031\000\000\000\000\000\137\000\000\000\000\000\000\000\
\000\000\032\000\000\000\033\000\000\000\034\000\007\000\008\000\
\009\000\000\000\010\000\011\000\012\000\013\000\014\000\015\000\
\000\000\016\000\017\000\018\000\019\000\020\000\021\000\000\000\
\000\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\031\000\000\000\000\000\145\000\000\000\
\000\000\000\000\000\000\032\000\000\000\033\000\000\000\034\000\
\007\000\008\000\009\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\000\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\000\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\031\000\000\000\000\000\
\146\000\000\000\000\000\000\000\000\000\032\000\000\000\033\000\
\000\000\034\000\007\000\008\000\009\000\000\000\010\000\011\000\
\012\000\013\000\014\000\015\000\000\000\016\000\017\000\018\000\
\019\000\020\000\021\000\000\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\031\000\
\000\000\000\000\147\000\000\000\000\000\000\000\000\000\032\000\
\000\000\033\000\000\000\034\000\007\000\008\000\009\000\000\000\
\010\000\011\000\012\000\013\000\014\000\015\000\000\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\031\000\000\000\000\000\148\000\000\000\000\000\000\000\
\000\000\032\000\000\000\033\000\000\000\034\000\007\000\008\000\
\009\000\000\000\010\000\011\000\012\000\013\000\014\000\015\000\
\000\000\016\000\017\000\018\000\019\000\020\000\021\000\000\000\
\000\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\031\000\000\000\000\000\159\000\000\000\
\000\000\000\000\000\000\032\000\000\000\033\000\000\000\034\000\
\007\000\008\000\009\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\000\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\000\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\031\000\000\000\000\000\
\161\000\000\000\000\000\000\000\000\000\032\000\000\000\033\000\
\000\000\034\000\007\000\008\000\009\000\000\000\010\000\011\000\
\012\000\013\000\014\000\015\000\000\000\016\000\017\000\018\000\
\019\000\020\000\021\000\000\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\000\000\000\000\029\000\000\000\
\000\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\031\000\
\034\000\000\000\034\000\000\000\034\000\034\000\034\000\032\000\
\034\000\033\000\000\000\034\000\050\000\050\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\050\000\000\000\
\050\000\000\000\050\000\050\000\050\000\000\000\050\000\066\000\
\067\000\000\000\068\000\069\000\070\000\071\000\072\000\073\000\
\000\000\074\000\075\000\076\000\077\000\078\000\079\000\038\000\
\038\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\000\000\162\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\038\000\000\000\038\000\038\000\038\000\
\000\000\038\000\039\000\039\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\039\000\000\000\
\039\000\039\000\039\000\000\000\039\000\066\000\067\000\000\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\067\000\092\000\068\000\069\000\
\070\000\071\000\072\000\073\000\000\000\074\000\075\000\076\000\
\077\000\078\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\067\000\094\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\074\000\075\000\076\000\077\000\078\000\
\079\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\067\000\095\000\068\000\069\000\070\000\071\000\072\000\073\000\
\000\000\074\000\075\000\076\000\077\000\078\000\079\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\067\000\140\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\035\000\035\000\035\000\
\035\000\035\000\000\000\000\000\100\000\000\000\036\000\036\000\
\036\000\036\000\036\000\000\000\035\000\000\000\035\000\000\000\
\035\000\035\000\035\000\000\000\035\000\036\000\000\000\036\000\
\000\000\036\000\036\000\036\000\000\000\036\000\037\000\037\000\
\037\000\037\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\037\000\
\000\000\037\000\037\000\037\000\000\000\037\000\066\000\067\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\066\000\067\000\
\099\000\068\000\069\000\070\000\071\000\072\000\073\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\066\000\067\000\
\131\000\000\000\000\000\070\000\071\000\072\000\073\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\066\000\067\000\
\000\000\000\000\000\000\000\000\066\000\067\000\073\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\074\000\075\000\
\076\000\077\000\078\000\079\000"

let yycheck = "\006\000\
\000\000\054\001\000\001\001\001\002\001\044\001\004\001\046\001\
\001\000\048\001\016\000\047\001\018\000\019\000\039\000\021\000\
\041\000\023\000\047\001\029\001\030\001\035\001\002\001\029\000\
\030\000\031\000\024\001\025\001\002\001\043\001\028\001\002\001\
\038\000\039\000\044\001\041\000\046\001\051\001\048\001\049\001\
\050\001\002\001\052\001\002\001\050\001\043\001\044\001\045\001\
\052\001\002\001\052\001\052\001\000\001\001\001\002\001\052\001\
\004\001\063\000\000\000\043\001\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\056\001\100\000\024\001\025\001\002\001\002\001\
\028\001\043\001\050\001\052\001\047\001\052\001\093\000\052\001\
\017\001\046\001\002\001\097\000\044\001\048\001\100\000\043\001\
\002\001\045\001\026\001\027\001\047\001\029\001\030\001\031\001\
\032\001\033\001\034\001\047\001\036\001\037\001\038\001\039\001\
\040\001\041\001\047\001\047\001\035\001\124\000\125\000\050\001\
\127\000\128\000\026\001\027\001\052\001\029\001\030\001\031\001\
\032\001\033\001\034\001\044\001\036\001\037\001\038\001\039\001\
\040\001\041\001\052\001\047\001\050\001\002\001\149\000\002\001\
\047\001\000\000\153\000\049\001\052\001\155\000\000\001\001\001\
\002\001\047\001\004\001\005\001\006\001\007\001\008\001\009\001\
\058\001\011\001\012\001\013\001\014\001\015\001\016\001\029\001\
\030\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\048\001\044\001\028\001\044\001\048\001\162\000\044\001\065\000\
\046\001\152\000\048\001\049\001\050\001\255\255\052\001\255\255\
\255\255\043\001\255\255\045\001\255\255\255\255\048\001\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\255\255\057\001\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\255\255\255\255\044\001\255\255\046\001\255\255\048\001\049\001\
\050\001\255\255\052\001\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\052\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\255\255\255\255\255\255\052\001\053\001\255\255\055\001\
\255\255\057\001\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\036\001\
\037\001\038\001\039\001\040\001\041\001\043\001\255\255\045\001\
\044\001\255\255\046\001\255\255\048\001\049\001\050\001\053\001\
\052\001\055\001\255\255\057\001\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\043\001\
\255\255\045\001\255\255\255\255\048\001\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\255\255\057\001\000\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\255\255\045\001\255\255\255\255\048\001\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\255\255\057\001\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\057\001\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\255\255\045\001\
\255\255\255\255\048\001\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\255\255\057\001\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\043\001\
\255\255\045\001\255\255\255\255\048\001\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\255\255\057\001\000\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\255\255\045\001\255\255\255\255\048\001\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\255\255\057\001\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\057\001\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\255\255\045\001\
\044\001\255\255\046\001\255\255\048\001\049\001\050\001\053\001\
\052\001\055\001\255\255\057\001\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\255\255\044\001\255\255\
\046\001\255\255\048\001\049\001\050\001\255\255\052\001\026\001\
\027\001\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\026\001\
\027\001\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\255\255\048\001\049\001\050\001\
\255\255\052\001\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\044\001\255\255\046\001\255\255\
\048\001\049\001\050\001\255\255\052\001\026\001\027\001\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\050\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\050\001\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\050\001\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\050\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\049\001\255\255\029\001\030\001\
\031\001\032\001\033\001\255\255\044\001\255\255\046\001\255\255\
\048\001\049\001\050\001\255\255\052\001\044\001\255\255\046\001\
\255\255\048\001\049\001\050\001\255\255\052\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\255\255\048\001\049\001\050\001\255\255\052\001\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\026\001\027\001\
\044\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\026\001\027\001\
\044\001\255\255\255\255\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\026\001\027\001\
\255\255\255\255\255\255\255\255\026\001\027\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\036\001\037\001\
\038\001\039\001\040\001\041\001"

let yynames_const = "\
  DEF\000\
  CLASS\000\
  IMPORT\000\
  AS\000\
  FROM\000\
  INIT\000\
  IF\000\
  ELSE\000\
  ELSE_IF\000\
  WHILE\000\
  READ\000\
  WRITE\000\
  IN\000\
  AT\000\
  FOR\000\
  RETURN\000\
  PASS\000\
  BREAK\000\
  CONTINUE\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  POW\000\
  EQ\000\
  EQUALS\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EOL\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  COLON\000\
  DOT\000\
  SEMICOLON\000\
  PRINT\000\
  MAIN\000\
  PUBLIC\000\
  STRUCT\000\
  ANNOT\000\
  ARROW\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  STRING\000\
  FSTRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 40 "compiler/lexer/parser.mly"
                                   ( 
      let stmts = _3 in
      conditional_debug_stmt (FunctionDef ("main", [], stmts)) stmt_to_string;
      FunctionDef ("main", [], stmts) :: []
    )
# 618 "compiler/lexer/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 45 "compiler/lexer/parser.mly"
                                   ( 
      List.iter (fun stmt -> conditional_debug_stmt stmt stmt_to_string) _1;
      _1 
    )
# 628 "compiler/lexer/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : stmt) in
    Obj.repr(
# 51 "compiler/lexer/parser.mly"
                                   ( 
      let stmts = _1 @ [_2] in
      conditional_debug_stmt _2 stmt_to_string;
      stmts 
    )
# 640 "compiler/lexer/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "compiler/lexer/parser.mly"
                                   ( [] )
# 646 "compiler/lexer/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : (string * string) list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 60 "compiler/lexer/parser.mly"
      ( 
        let fn = FunctionDef (_2, _4, _8) in
        conditional_debug_stmt fn stmt_to_string;
        fn 
      )
# 659 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 66 "compiler/lexer/parser.mly"
      ( 
        let cls = ClassDef (_2, _5) in
        conditional_debug_stmt cls stmt_to_string;
        cls 
      )
# 671 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 72 "compiler/lexer/parser.mly"
      ( 
        let if_stmt = If (_2, _5) in
        conditional_debug_stmt if_stmt stmt_to_string;
        if_stmt 
      )
# 683 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 78 "compiler/lexer/parser.mly"
      ( 
        let else_stmt = Else (_4) in
        conditional_debug_stmt else_stmt stmt_to_string;
        else_stmt 
      )
# 694 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 84 "compiler/lexer/parser.mly"
      ( 
        let elseif_stmt = ElseIf (_2, _5) in
        conditional_debug_stmt elseif_stmt stmt_to_string;
        elseif_stmt 
      )
# 706 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 90 "compiler/lexer/parser.mly"
      ( 
        let while_stmt = While (_2, _5) in
        conditional_debug_stmt while_stmt stmt_to_string;
        while_stmt 
      )
# 718 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 96 "compiler/lexer/parser.mly"
      ( 
        let for_stmt = For (_2, _4, _7) in
        conditional_debug_stmt for_stmt stmt_to_string;
        for_stmt 
      )
# 731 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 102 "compiler/lexer/parser.mly"
      ( 
        let return_stmt = Return (_2) in
        conditional_debug_stmt return_stmt stmt_to_string;
        return_stmt 
      )
# 742 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 108 "compiler/lexer/parser.mly"
      ( 
        let import_stmt = Import (_2) in
        conditional_debug_stmt import_stmt stmt_to_string;
        import_stmt 
      )
# 753 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 114 "compiler/lexer/parser.mly"
      ( 
        let as_stmt = As (_2) in
        conditional_debug_stmt as_stmt stmt_to_string;
        as_stmt 
      )
# 764 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 120 "compiler/lexer/parser.mly"
      ( 
        let from_stmt = From (_2) in
        conditional_debug_stmt from_stmt stmt_to_string;
        from_stmt 
      )
# 775 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 126 "compiler/lexer/parser.mly"
      ( 
        let write_stmt = Write (_2) in
        conditional_debug_stmt write_stmt stmt_to_string;
        write_stmt 
      )
# 786 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    Obj.repr(
# 132 "compiler/lexer/parser.mly"
      ( 
        let print_stmt = Expr (FunctionCall ("print", [_3])) in
        conditional_debug_stmt print_stmt stmt_to_string;
        print_stmt 
      )
# 797 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "compiler/lexer/parser.mly"
      ( 
        let pass_stmt = Pass in
        conditional_debug_stmt pass_stmt stmt_to_string;
        pass_stmt 
      )
# 807 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "compiler/lexer/parser.mly"
      ( 
        let break_stmt = Break in
        conditional_debug_stmt break_stmt stmt_to_string;
        break_stmt 
      )
# 817 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "compiler/lexer/parser.mly"
      ( 
        let continue_stmt = Continue in
        conditional_debug_stmt continue_stmt stmt_to_string;
        continue_stmt 
      )
# 827 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "compiler/lexer/parser.mly"
      ( 
        let read_stmt = Read in
        conditional_debug_stmt read_stmt stmt_to_string;
        read_stmt 
      )
# 837 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'struct_fields) in
    Obj.repr(
# 162 "compiler/lexer/parser.mly"
      ( 
        let struct_def = StructDef (_3, _6) in
        conditional_debug_stmt struct_def stmt_to_string;
        struct_def 
      )
# 849 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : stmt) in
    Obj.repr(
# 168 "compiler/lexer/parser.mly"
      ( 
        let annotated_stmt = AnnotatedStmt (_2, _3) in
        conditional_debug_stmt annotated_stmt stmt_to_string;
        annotated_stmt 
      )
# 861 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 174 "compiler/lexer/parser.mly"
      ( 
        let expr_stmt = Expr (_1) in
        conditional_debug_stmt expr_stmt stmt_to_string;
        expr_stmt 
      )
# 872 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "compiler/lexer/parser.mly"
      ( 
        let error_stmt = Pass in
        conditional_debug_stmt error_stmt stmt_to_string;
        error_stmt 
      )
# 882 "compiler/lexer/parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 187 "compiler/lexer/parser.mly"
                                  ( 
        let int_expr = Int (_1) in
        conditional_debug_expr int_expr expr_to_string;
        int_expr 
      )
# 893 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "compiler/lexer/parser.mly"
                                  ( 
        let true_expr = Bool (true) in
        conditional_debug_expr true_expr expr_to_string;
        true_expr 
      )
# 903 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "compiler/lexer/parser.mly"
                                  ( 
        let false_expr = Bool (false) in
        conditional_debug_expr false_expr expr_to_string;
        false_expr 
      )
# 913 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 202 "compiler/lexer/parser.mly"
                                  ( 
        let call_expr = FunctionCall (_1, []) in
        conditional_debug_expr call_expr expr_to_string;
        call_expr 
      )
# 924 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : expr list) in
    Obj.repr(
# 207 "compiler/lexer/parser.mly"
                                  ( 
        let call_expr = FunctionCall (_1, _3) in
        conditional_debug_expr call_expr expr_to_string;
        call_expr 
      )
# 936 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 212 "compiler/lexer/parser.mly"
                                  ( 
        let var_expr = Var (_1) in
        conditional_debug_expr var_expr expr_to_string;
        var_expr 
      )
# 947 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 217 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("+", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 959 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 222 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("-", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 971 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 227 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("*", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 983 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 232 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("/", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 995 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 237 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("%", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1007 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 242 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("**", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1019 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 247 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("and", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1031 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 252 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("or", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1043 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 257 "compiler/lexer/parser.mly"
                                  ( 
        let unop_expr = UnOp ("not", _2) in
        conditional_debug_expr unop_expr expr_to_string;
        unop_expr 
      )
# 1054 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 262 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("==", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1066 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 267 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("!=", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1078 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 272 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("<", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1090 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 277 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp (">", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1102 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 282 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp ("<=", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1114 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 287 "compiler/lexer/parser.mly"
                                  ( 
        let binop_expr = BinOp (">=", _1, _3) in
        conditional_debug_expr binop_expr expr_to_string;
        binop_expr 
      )
# 1126 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 292 "compiler/lexer/parser.mly"
                                  ( 
        let paren_expr = _2 in
        conditional_debug_expr paren_expr expr_to_string;
        paren_expr 
      )
# 1137 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 297 "compiler/lexer/parser.mly"
                                  ( 
        let assign_expr = Assign (_1, _3) in
        conditional_debug_expr assign_expr expr_to_string;
        assign_expr 
      )
# 1149 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr list) in
    Obj.repr(
# 302 "compiler/lexer/parser.mly"
                                  ( 
        let array_expr = ArrayLiteral (_2) in
        conditional_debug_expr array_expr expr_to_string;
        array_expr 
      )
# 1160 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 307 "compiler/lexer/parser.mly"
                                  ( 
        let fstring_expr = FString (_1, []) in
        conditional_debug_expr fstring_expr expr_to_string;
        fstring_expr 
      )
# 1171 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : expr list) in
    Obj.repr(
# 313 "compiler/lexer/parser.mly"
                                  ( 
        let fstring_expr = FString (_1, _3) in
        conditional_debug_expr fstring_expr expr_to_string;
        fstring_expr 
      )
# 1183 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 318 "compiler/lexer/parser.mly"
                                  ( 
        let field_access_expr = StructFieldAccess (_1, _3) in
        conditional_debug_expr field_access_expr expr_to_string;
        field_access_expr 
      )
# 1195 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 324 "compiler/lexer/parser.mly"
      ( 
        let error_expr = Var ("error") in
        conditional_debug_expr error_expr expr_to_string;
        error_expr 
      )
# 1205 "compiler/lexer/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr list) in
    Obj.repr(
# 331 "compiler/lexer/parser.mly"
                                  ( _1 :: _3 )
# 1213 "compiler/lexer/parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 332 "compiler/lexer/parser.mly"
                                  ( [_1] )
# 1220 "compiler/lexer/parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 335 "compiler/lexer/parser.mly"
                                  ( _1 )
# 1227 "compiler/lexer/parser.ml"
               : (string * string) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 336 "compiler/lexer/parser.mly"
                                  ( [] )
# 1233 "compiler/lexer/parser.ml"
               : (string * string) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 339 "compiler/lexer/parser.mly"
                                 ( (_1, _3) :: _5 )
# 1242 "compiler/lexer/parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 340 "compiler/lexer/parser.mly"
                ( [(_1, _3)] )
# 1250 "compiler/lexer/parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'struct_fields) in
    Obj.repr(
# 343 "compiler/lexer/parser.mly"
                                          ( (_1, _3) :: _5 )
# 1259 "compiler/lexer/parser.ml"
               : 'struct_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 344 "compiler/lexer/parser.mly"
                                           ( [(_1, _3)] )
# 1267 "compiler/lexer/parser.ml"
               : 'struct_fields))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
